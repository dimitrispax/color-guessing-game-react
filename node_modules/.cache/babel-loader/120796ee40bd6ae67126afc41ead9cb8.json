{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/components/ColorsContainer/ColorsContainer.js\";\nimport containerStyle from './ColorsContainer.module.css';\nimport containerStyleMedium from './ColorsContainerMedium.module.css';\nimport containerStyleHard from './ColorsContainerHard.module.css';\nimport ColorSquare from '../ColorSquare/ColorSquare';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ColorsContainer = _ref => {\n  let {\n    colorsArray,\n    correctColor,\n    style,\n    setColorsArray,\n    setTitleBarColor,\n    setResultBarButtonText,\n    setResultBarMessage\n  } = _ref;\n\n  const clickHandler = (color, id) => {\n    // if the color of the clicked button is equal\n    if (color === correctColor) {\n      // with the correctColor, then: \n      changeColor();\n      setTitleBarColor(correctColor);\n      setResultBarButtonText(\"PLAY AGAIN\");\n      setResultBarMessage(\"CORRECT!\");\n    } else {\n      changeVisibility(id);\n      setResultBarMessage(\"WRONG, TRY AGAIN!\");\n    }\n  };\n\n  const changeColor = () => {\n    const tempColorsArray = [...colorsArray];\n    tempColorsArray.map(object => {\n      if (object.visibility === 'visible') object.color = correctColor;\n    });\n    setColorsArray(tempColorsArray);\n  };\n\n  const changeVisibility = id => {\n    const tempColorsArray = [...colorsArray];\n    tempColorsArray[id].visibility = 'hidden';\n    setColorsArray(tempColorsArray);\n  }; //   condition1 ? value1\n  //  : condition2 ? value2\n  //  : condition3 ? value3\n  //  : value4\n\n\n  console.log('Style: ', valueOf());\n  console.log('Style: ', valueOf());\n  return (\n    /*#__PURE__*/\n    // <div className={(difficulty === \"EASY\") ? containerStyle.mainContainer : (difficulty === \"MEDIUM\") ? containerStyleMedium.mainContainer : containerStyleHard.mainContainer}>\n    //     <div className={(difficulty === \"EASY\") ? containerStyle.innerContainer : (difficulty === \"MEDIUM\") ? containerStyleMedium.innerContainer : containerStyleHard.innerContainer}>\n    _jsxDEV(\"div\", {\n      className: style.mainContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.innerContainer,\n        children: Object.keys(colorsArray).map(key => {\n          return /*#__PURE__*/_jsxDEV(ColorSquare, {\n            correctColor: correctColor,\n            onClick: () => clickHandler(colorsArray[key].color, colorsArray[key].id),\n            backgroundColor: colorsArray[key].color,\n            visibility: colorsArray[key].visibility\n          }, colorsArray[key].id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_c = ColorsContainer;\nexport default ColorsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsContainer\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/components/ColorsContainer/ColorsContainer.js"],"names":["containerStyle","containerStyleMedium","containerStyleHard","ColorSquare","ColorsContainer","colorsArray","correctColor","style","setColorsArray","setTitleBarColor","setResultBarButtonText","setResultBarMessage","clickHandler","color","id","changeColor","changeVisibility","tempColorsArray","map","object","visibility","console","log","valueOf","mainContainer","innerContainer","Object","keys","key"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAEA,MAAMC,eAAe,GAAG,QAAyH;AAAA,MAAxH;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA,cAApC;AAAoDC,IAAAA,gBAApD;AAAsEC,IAAAA,sBAAtE;AAA8FC,IAAAA;AAA9F,GAAwH;;AAE7I,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAe;AAAU;AAC1C,QAAID,KAAK,KAAKP,YAAd,EAA4B;AAAc;AACtCS,MAAAA,WAAW;AACXN,MAAAA,gBAAgB,CAACH,YAAD,CAAhB;AACAI,MAAAA,sBAAsB,CAAC,YAAD,CAAtB;AACAC,MAAAA,mBAAmB,CAAC,UAAD,CAAnB;AACH,KALD,MAKO;AACHK,MAAAA,gBAAgB,CAACF,EAAD,CAAhB;AACAH,MAAAA,mBAAmB,CAAC,mBAAD,CAAnB;AACH;AACJ,GAVD;;AAYA,QAAMI,WAAW,GAAG,MAAM;AACtB,UAAME,eAAe,GAAG,CAAC,GAAGZ,WAAJ,CAAxB;AACAY,IAAAA,eAAe,CAACC,GAAhB,CAAoBC,MAAM,IAAI;AAC1B,UAAIA,MAAM,CAACC,UAAP,KAAsB,SAA1B,EACID,MAAM,CAACN,KAAP,GAAeP,YAAf;AACP,KAHD;AAIAE,IAAAA,cAAc,CAACS,eAAD,CAAd;AACH,GAPD;;AASA,QAAMD,gBAAgB,GAAIF,EAAD,IAAQ;AAC7B,UAAMG,eAAe,GAAG,CAAC,GAAGZ,WAAJ,CAAxB;AACAY,IAAAA,eAAe,CAACH,EAAD,CAAf,CAAoBM,UAApB,GAAiC,QAAjC;AACAZ,IAAAA,cAAc,CAACS,eAAD,CAAd;AACH,GAJD,CAvB6I,CA8B7I;AACA;AACA;AACA;;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,OAAO,EAA9B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,OAAO,EAA9B;AAEA;AAAA;AACI;AACA;AACA;AAAK,MAAA,SAAS,EAAEhB,KAAK,CAACiB,aAAtB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAEjB,KAAK,CAACkB,cAAtB;AAAA,kBAIKC,MAAM,CAACC,IAAP,CAAYtB,WAAZ,EAAyBa,GAAzB,CAA8BU,GAAD,IAAS;AACnC,8BACI,QAAC,WAAD;AACI,YAAA,YAAY,EAAEtB,YADlB;AAEI,YAAA,OAAO,EAAE,MAAMM,YAAY,CAACP,WAAW,CAACuB,GAAD,CAAX,CAAiBf,KAAlB,EAAyBR,WAAW,CAACuB,GAAD,CAAX,CAAiBd,EAA1C,CAF/B;AAGI,YAAA,eAAe,EAAET,WAAW,CAACuB,GAAD,CAAX,CAAiBf,KAHtC;AAII,YAAA,UAAU,EAAER,WAAW,CAACuB,GAAD,CAAX,CAAiBR;AAJjC,aAAkBf,WAAW,CAACuB,GAAD,CAAX,CAAiBd,EAAnC;AAAA;AAAA;AAAA;AAAA,kBADJ;AAQH,SATA;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHJ;AAsBH,CA3DD;;KAAMV,e;AA6DN,eAAeA,eAAf","sourcesContent":["import containerStyle from './ColorsContainer.module.css';\nimport containerStyleMedium from './ColorsContainerMedium.module.css';\nimport containerStyleHard from './ColorsContainerHard.module.css';\nimport ColorSquare from '../ColorSquare/ColorSquare';\n\nconst ColorsContainer = ({ colorsArray, correctColor, style, setColorsArray, setTitleBarColor, setResultBarButtonText, setResultBarMessage }) => {\n\n    const clickHandler = (color, id) => {         // if the color of the clicked button is equal\n        if (color === correctColor) {             // with the correctColor, then: \n            changeColor()\n            setTitleBarColor(correctColor)\n            setResultBarButtonText(\"PLAY AGAIN\")\n            setResultBarMessage(\"CORRECT!\")\n        } else {\n            changeVisibility(id)\n            setResultBarMessage(\"WRONG, TRY AGAIN!\")\n        }\n    }\n\n    const changeColor = () => {\n        const tempColorsArray = [...colorsArray]\n        tempColorsArray.map(object => {\n            if (object.visibility === 'visible')\n                object.color = correctColor\n        })\n        setColorsArray(tempColorsArray)\n    }\n\n    const changeVisibility = (id) => {\n        const tempColorsArray = [...colorsArray]\n        tempColorsArray[id].visibility = 'hidden';\n        setColorsArray(tempColorsArray)\n    }\n\n\n    //   condition1 ? value1\n    //  : condition2 ? value2\n    //  : condition3 ? value3\n    //  : value4\n    console.log('Style: ', valueOf() )\n    console.log('Style: ', valueOf() )\n\n    return (\n        // <div className={(difficulty === \"EASY\") ? containerStyle.mainContainer : (difficulty === \"MEDIUM\") ? containerStyleMedium.mainContainer : containerStyleHard.mainContainer}>\n        //     <div className={(difficulty === \"EASY\") ? containerStyle.innerContainer : (difficulty === \"MEDIUM\") ? containerStyleMedium.innerContainer : containerStyleHard.innerContainer}>\n        <div className={style.mainContainer}>\n            <div className={style.innerContainer}>\n\n                {/* // <div className={containerStyleMedium.mainContainer}>\n        //     <div className={containerStyleMedium.innerContainer}> */}\n                {Object.keys(colorsArray).map((key) => {\n                    return (\n                        <ColorSquare key={colorsArray[key].id}\n                            correctColor={correctColor}\n                            onClick={() => clickHandler(colorsArray[key].color, colorsArray[key].id)}\n                            backgroundColor={colorsArray[key].color}\n                            visibility={colorsArray[key].visibility}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    )\n\n}\n\nexport default ColorsContainer;"]},"metadata":{},"sourceType":"module"}