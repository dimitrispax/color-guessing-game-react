{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport TitleBar from \"./components/TitleBar\";\nimport ResultBar from \"./components/ResultBar\";\nimport ColorsContainer from \"./components/ColorsContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  const [resultBarMessage, setResultBarMessage] = useState(\"Select the correct color.\");\n  const [resultBarButtonText, setResultBarButtonText] = useState(\"NEW COLORS\");\n  const [titleBarColor, setTitleBarColor] = useState(\"rgb(28, 173, 173)\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState(false);\n  const [correctColor, setCorrectColor] = useState(\"\");\n  const [colorsArray, setColorsArray] = useState([]);\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  useEffect(() => {\n    if (playAgainFlagData) {\n      initializeGame();\n      setplayAgainFlagData(false);\n    }\n  }, [playAgainFlagData]);\n\n  const initializeGame = () => {\n    let squareData = [];\n    let id = 0;\n\n    for (let i = 1; i <= 6; i++) {\n      squareData.push(randomColorGenerator(i - 1));\n    }\n\n    let randomSquare = Math.floor(Math.random() * squareData.length);\n    setCorrectColor(squareData[randomSquare].color);\n    setColorsArray(squareData);\n    setTitleBarColor(\"rgb(28, 173, 173)\");\n  };\n\n  const randomColorGenerator = id => {\n    let red = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the red.\n\n    let green = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the green.\n\n    let blue = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the blue.\n\n    return {\n      color: \"rgb(\" + red + \", \" + green + \", \" + blue + \")\",\n      visibility: 'visible',\n      id: id\n    }; //\"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      correctColor: correctColor,\n      titleBarColor: titleBarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultBar, {\n      resultBarMessage: resultBarMessage,\n      resultBarButtonText: resultBarButtonText,\n      playAgain: () => {\n        initializeGame();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorsContainer, {\n      correctColor: correctColor,\n      colorsArray: colorsArray,\n      setColorsArray: setColorsArray,\n      setResultBarMessage: setResultBarMessage,\n      setResultBarButtonText: setResultBarButtonText,\n      setTitleBarColor: setTitleBarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lGU0UiXbXu+1W8orf93KaRr5W2Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/App.js"],"names":["useEffect","useState","TitleBar","ResultBar","ColorsContainer","App","props","resultBarMessage","setResultBarMessage","resultBarButtonText","setResultBarButtonText","titleBarColor","setTitleBarColor","playAgainFlagData","setplayAgainFlagData","correctColor","setCorrectColor","colorsArray","setColorsArray","initializeGame","squareData","id","i","push","randomColorGenerator","randomSquare","Math","floor","random","length","color","red","green","blue","visibility"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport TitleBar from \"./components/TitleBar\";\nimport ResultBar from \"./components/ResultBar\";\nimport ColorsContainer from \"./components/ColorsContainer\";\n\nconst App = (props) => {\n\n  const [resultBarMessage, setResultBarMessage] = useState(\"Select the correct color.\");\n  const [resultBarButtonText, setResultBarButtonText] = useState(\"NEW COLORS\");\n  const [titleBarColor, setTitleBarColor] = useState(\"rgb(28, 173, 173)\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState(false);\n  const [correctColor, setCorrectColor] = useState(\"\");\n  const [colorsArray, setColorsArray] = useState([]);\n\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  useEffect(() => {\n    if (playAgainFlagData) {\n      initializeGame();\n      setplayAgainFlagData(false);\n    }\n  }, [playAgainFlagData]);\n\n  const initializeGame = () => {\n    let squareData = [];\n    let id = 0;\n    for (let i = 1; i <= 6; i++) {\n      squareData.push(randomColorGenerator(i - 1));\n    }\n    let randomSquare = Math.floor(Math.random() * squareData.length)\n    setCorrectColor(squareData[randomSquare].color);\n    setColorsArray(squareData);\n    setTitleBarColor(\"rgb(28, 173, 173)\")\n  }\n\n  const randomColorGenerator = (id) => {\n    let red = Math.floor(Math.random() * 256);    // Setting a random value (0-255) for the red.\n    let green = Math.floor(Math.random() * 256);  // Setting a random value (0-255) for the green.\n    let blue = Math.floor(Math.random() * 256);   // Setting a random value (0-255) for the blue.\n    return { color: \"rgb(\" + red + \", \" + green + \", \" + blue + \")\", visibility: 'visible', id: id }//\"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return (\n    <div>\n      <TitleBar\n        correctColor={correctColor}\n      titleBarColor={titleBarColor}\n      />\n      <ResultBar\n        resultBarMessage={resultBarMessage}\n        resultBarButtonText={resultBarButtonText}\n        playAgain={() => { initializeGame() }}\n      />\n      <ColorsContainer\n        correctColor={correctColor}\n        colorsArray={colorsArray}\n        setColorsArray={setColorsArray}\n        setResultBarMessage={setResultBarMessage}\n        setResultBarButtonText={setResultBarButtonText}\n        setTitleBarColor={setTitleBarColor}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}