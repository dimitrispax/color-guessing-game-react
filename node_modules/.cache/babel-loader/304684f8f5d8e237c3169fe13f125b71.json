{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/components/ColorsContainer/ColorsContainer.js\";\nimport containerStyle from './ColorsContainer.module.css';\nimport containerStyleMedium from './ColorsContainerMedium.module.css';\nimport ColorSquare from '../ColorSquare/ColorSquare';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ColorsContainer = _ref => {\n  let {\n    colorsArray,\n    correctColor,\n    difficulty,\n    setColorsArray,\n    setTitleBarColor,\n    setResultBarButtonText,\n    setResultBarMessage\n  } = _ref;\n\n  const clickHandler = (color, id) => {\n    // if the color of the clicked button is equal\n    if (color === correctColor) {\n      // with the correctColor, then: \n      changeColor();\n      setTitleBarColor(correctColor);\n      setResultBarButtonText(\"PLAY AGAIN\");\n      setResultBarMessage(\"CORRECT!\");\n    } else {\n      changeVisibility(id);\n      setResultBarMessage(\"WRONG, TRY AGAIN!\");\n    }\n  };\n\n  const changeColor = () => {\n    const tempColorsArray = [...colorsArray];\n    tempColorsArray.map(object => {\n      if (object.visibility === 'visible') object.color = correctColor;\n    });\n    setColorsArray(tempColorsArray);\n  };\n\n  const changeVisibility = id => {\n    const tempColorsArray = [...colorsArray];\n    tempColorsArray[id].visibility = 'hidden';\n    setColorsArray(tempColorsArray);\n  }; //   condition1 ? value1\n  //  : condition2 ? value2\n  //  : condition3 ? value3\n  //  : value4\n\n\n  console.log('EDWWW: ', difficulty);\n  return (\n    /*#__PURE__*/\n    // <div className={condition1 ? value1 : condition2 ? value2 : condition3 ? value3}>\n    _jsxDEV(\"div\", {\n      className: containerStyleMedium.innerContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: containerStyleMedium.innerContainer,\n        children: [\" */}\", Object.keys(colorsArray).map(key => {\n          return /*#__PURE__*/_jsxDEV(ColorSquare, {\n            correctColor: correctColor,\n            onClick: () => clickHandler(colorsArray[key].color, colorsArray[key].id),\n            backgroundColor: colorsArray[key].color,\n            visibility: colorsArray[key].visibility\n          }, colorsArray[key].id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  );\n};\n\n_c = ColorsContainer;\nexport default ColorsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsContainer\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/components/ColorsContainer/ColorsContainer.js"],"names":["containerStyle","containerStyleMedium","ColorSquare","ColorsContainer","colorsArray","correctColor","difficulty","setColorsArray","setTitleBarColor","setResultBarButtonText","setResultBarMessage","clickHandler","color","id","changeColor","changeVisibility","tempColorsArray","map","object","visibility","console","log","innerContainer","Object","keys","key"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAEA,MAAMC,eAAe,GAAG,QAA8H;AAAA,MAA7H;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA,UAA7B;AAAyCC,IAAAA,cAAzC;AAAyDC,IAAAA,gBAAzD;AAA2EC,IAAAA,sBAA3E;AAAmGC,IAAAA;AAAnG,GAA6H;;AAElJ,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAe;AAAU;AAC1C,QAAID,KAAK,KAAKP,YAAd,EAA4B;AAAc;AACtCS,MAAAA,WAAW;AACXN,MAAAA,gBAAgB,CAACH,YAAD,CAAhB;AACAI,MAAAA,sBAAsB,CAAC,YAAD,CAAtB;AACAC,MAAAA,mBAAmB,CAAC,UAAD,CAAnB;AACH,KALD,MAKO;AACHK,MAAAA,gBAAgB,CAACF,EAAD,CAAhB;AACAH,MAAAA,mBAAmB,CAAC,mBAAD,CAAnB;AACH;AACJ,GAVD;;AAYA,QAAMI,WAAW,GAAG,MAAM;AACtB,UAAME,eAAe,GAAG,CAAC,GAAGZ,WAAJ,CAAxB;AACAY,IAAAA,eAAe,CAACC,GAAhB,CAAoBC,MAAM,IAAI;AAC1B,UAAIA,MAAM,CAACC,UAAP,KAAsB,SAA1B,EACID,MAAM,CAACN,KAAP,GAAeP,YAAf;AACP,KAHD;AAIAE,IAAAA,cAAc,CAACS,eAAD,CAAd;AACH,GAPD;;AASA,QAAMD,gBAAgB,GAAIF,EAAD,IAAQ;AAC7B,UAAMG,eAAe,GAAG,CAAC,GAAGZ,WAAJ,CAAxB;AACAY,IAAAA,eAAe,CAACH,EAAD,CAAf,CAAoBM,UAApB,GAAiC,QAAjC;AACAZ,IAAAA,cAAc,CAACS,eAAD,CAAd;AACH,GAJD,CAvBkJ,CA8BlJ;AACA;AACA;AACA;;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBf,UAAvB;AAEA;AAAA;AACI;AACI;AAAK,MAAA,SAAS,EAAEL,oBAAoB,CAACqB,cAArC;AAAA,6BAGA;AAAK,QAAA,SAAS,EAAErB,oBAAoB,CAACqB,cAArC;AAAA,2BACKC,MAAM,CAACC,IAAP,CAAYpB,WAAZ,EAAyBa,GAAzB,CAA8BQ,GAAD,IAAS;AACnC,8BACI,QAAC,WAAD;AACI,YAAA,YAAY,EAAEpB,YADlB;AAEI,YAAA,OAAO,EAAE,MAAMM,YAAY,CAACP,WAAW,CAACqB,GAAD,CAAX,CAAiBb,KAAlB,EAAyBR,WAAW,CAACqB,GAAD,CAAX,CAAiBZ,EAA1C,CAF/B;AAGI,YAAA,eAAe,EAAET,WAAW,CAACqB,GAAD,CAAX,CAAiBb,KAHtC;AAII,YAAA,UAAU,EAAER,WAAW,CAACqB,GAAD,CAAX,CAAiBN;AAJjC,aAAkBf,WAAW,CAACqB,GAAD,CAAX,CAAiBZ,EAAnC;AAAA;AAAA;AAAA;AAAA,kBADJ;AAQH,SATA,CADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAFR;AAoBH,CAxDD;;KAAMV,e;AA0DN,eAAeA,eAAf","sourcesContent":["import containerStyle from './ColorsContainer.module.css';\nimport containerStyleMedium from './ColorsContainerMedium.module.css';\nimport ColorSquare from '../ColorSquare/ColorSquare';\n\nconst ColorsContainer = ({ colorsArray, correctColor, difficulty, setColorsArray, setTitleBarColor, setResultBarButtonText, setResultBarMessage }) => {\n\n    const clickHandler = (color, id) => {         // if the color of the clicked button is equal\n        if (color === correctColor) {             // with the correctColor, then: \n            changeColor()\n            setTitleBarColor(correctColor)\n            setResultBarButtonText(\"PLAY AGAIN\")\n            setResultBarMessage(\"CORRECT!\")\n        } else {\n            changeVisibility(id)\n            setResultBarMessage(\"WRONG, TRY AGAIN!\")\n        }\n    }\n\n    const changeColor = () => {\n        const tempColorsArray = [...colorsArray]\n        tempColorsArray.map(object => {\n            if (object.visibility === 'visible')\n                object.color = correctColor\n        })\n        setColorsArray(tempColorsArray)\n    }\n\n    const changeVisibility = (id) => {\n        const tempColorsArray = [...colorsArray]\n        tempColorsArray[id].visibility = 'hidden';\n        setColorsArray(tempColorsArray)\n    }\n\n\n    //   condition1 ? value1\n    //  : condition2 ? value2\n    //  : condition3 ? value3\n    //  : value4\n    console.log('EDWWW: ', difficulty)\n\n    return (\n        // <div className={condition1 ? value1 : condition2 ? value2 : condition3 ? value3}>\n            <div className={containerStyleMedium.innerContainer}>\n\n                {/* {/* <div className={containerStyleMedium.mainContainer}> */}\n            <div className={containerStyleMedium.innerContainer}> */}\n                {Object.keys(colorsArray).map((key) => {\n                    return (\n                        <ColorSquare key={colorsArray[key].id}\n                            correctColor={correctColor}\n                            onClick={() => clickHandler(colorsArray[key].color, colorsArray[key].id)}\n                            backgroundColor={colorsArray[key].color}\n                            visibility={colorsArray[key].visibility}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    )\n\n}\n\nexport default ColorsContainer;"]},"metadata":{},"sourceType":"module"}