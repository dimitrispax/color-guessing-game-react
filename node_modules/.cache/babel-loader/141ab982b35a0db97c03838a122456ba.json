{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport TitleBar from \"./components/TitleBar\";\nimport ResultBar from \"./components/ResultBar\";\nimport ColorsContainer from \"./components/ColorsContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [messageContainerData, setMessageContainerData] = useState(\"\");\n  const [playAgainContainerData, setplayAgainContainerData] = useState(\"\");\n  const [titleColorContainerData, setTitleColorContainerData] = useState(\"\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState();\n  let message = messageContainerData;\n  let buttonText = playAgainContainerData;\n  let titleColorApp = titleColorContainerData;\n  let playAgainFlag = playAgainFlagData;\n  const color = useRef();\n  const lotteryArray = useRef([]);\n  const correctBtn = useRef();\n  ini;\n\n  function initializeGame() {\n    color.current = randomColorGenerator();\n    lotteryArray.current = ['btn1', 'btn2', 'btn3', 'btn4', 'btn5', 'btn6'];\n    correctBtn.current = lotteryArray[Math.floor(Math.random() * 7)];\n\n    while (typeof correctBtn == 'undefined') {\n      correctBtn = lotteryArray[Math.floor(Math.random() * 7)];\n    }\n  }\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the red.\n\n    let green = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the green.\n\n    let blue = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"; // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      color: color.current,\n      titleColor: titleColorApp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultBar, {\n      message: message,\n      buttonText: buttonText,\n      playAgain: setplayAgainFlagData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorsContainer, {\n      messageContainer: setMessageContainerData,\n      playAgainContainer: setplayAgainContainerData,\n      titleColorContainer: setTitleColorContainerData,\n      color: color.current,\n      correctBtn: props.correctBtn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LX1MvRg5dY+BwFyIia7RjoWizDM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/App.js"],"names":["useRef","useState","TitleBar","ResultBar","ColorsContainer","App","props","messageContainerData","setMessageContainerData","playAgainContainerData","setplayAgainContainerData","titleColorContainerData","setTitleColorContainerData","playAgainFlagData","setplayAgainFlagData","message","buttonText","titleColorApp","playAgainFlag","color","lotteryArray","correctBtn","ini","initializeGame","current","randomColorGenerator","Math","floor","random","red","green","blue"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\n\nimport TitleBar from \"./components/TitleBar\";\nimport ResultBar from \"./components/ResultBar\";\nimport ColorsContainer from \"./components/ColorsContainer\";\n\n\nfunction App(props) {\n\n  const [messageContainerData, setMessageContainerData] = useState(\"\");\n  const [playAgainContainerData, setplayAgainContainerData] = useState(\"\");\n  const [titleColorContainerData, setTitleColorContainerData] = useState(\"\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState();\n\n  let message = messageContainerData;\n  let buttonText = playAgainContainerData;\n  let titleColorApp = titleColorContainerData;\n  let playAgainFlag = playAgainFlagData;\n\n  const color = useRef();\n  const lotteryArray = useRef([]);\n  const correctBtn = useRef();\n\n\n\nini\n\n  function initializeGame() {\n    color.current = randomColorGenerator();\n    lotteryArray.current = ['btn1', 'btn2', 'btn3', 'btn4', 'btn5', 'btn6'];\n    correctBtn.current = lotteryArray[Math.floor(Math.random() * 7)];\n    while (typeof correctBtn == 'undefined') {\n      correctBtn = lotteryArray[Math.floor(Math.random() * 7)];\n    }\n  }\n\n\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256);                         // Setting a random value (0-255) for the red.\n    let green = Math.floor(Math.random() * 256);                       // Setting a random value (0-255) for the green.\n    let blue = Math.floor(Math.random() * 256);                        // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return (\n    <div>\n      <TitleBar color={color.current} titleColor={titleColorApp} />\n      <ResultBar message={message} buttonText={buttonText} playAgain={setplayAgainFlagData} />\n      <ColorsContainer messageContainer={setMessageContainerData} playAgainContainer={setplayAgainContainerData} titleColorContainer={setTitleColorContainerData} color={color.current} correctBtn={props.correctBtn} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}