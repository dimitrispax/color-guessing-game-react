{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/components/ResultBar.js\";\nimport resultStyle from './ResultBar.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultBar(props) {\n  initializeGame();\n\n  function initializeGame() {\n    color = randomColorGenerator();\n    let lotteryArray = ['btn1', 'btn2', 'btn3', 'btn4', 'btn5', 'btn6'];\n    correctBtn = lotteryArray[Math.floor(Math.random() * 7)];\n\n    while (typeof correctBtn == 'undefined') {\n      correctBtn = lotteryArray[Math.floor(Math.random() * 7)];\n    }\n  }\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the red.\n\n    let green = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the green.\n\n    let blue = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"; // Returning the whole new rgb(r,g,b) string.\n  }\n\n  function flagHandler() {\n    props.setPlayAgainFlag(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: resultStyle.mainContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: resultStyle.innerContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flagHandler,\n        className: resultStyle.btn,\n        children: props.buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: resultStyle.message,\n        children: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ResultBar;\nexport default ResultBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultBar\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/components/ResultBar.js"],"names":["resultStyle","ResultBar","props","initializeGame","color","randomColorGenerator","lotteryArray","correctBtn","Math","floor","random","red","green","blue","flagHandler","setPlayAgainFlag","mainContainer","innerContainer","btn","buttonText","message"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,wBAAxB;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAEtBC,EAAAA,cAAc;;AAElB,WAASA,cAAT,GAA0B;AACxBC,IAAAA,KAAK,GAAGC,oBAAoB,EAA5B;AACA,QAAIC,YAAY,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,CAAnB;AACAC,IAAAA,UAAU,GAAGD,YAAY,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAzB;;AACA,WAAO,OAAOH,UAAP,IAAqB,WAA5B,EAAyC;AACvCA,MAAAA,UAAU,GAAGD,YAAY,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAzB;AACD;AACF;;AAID,WAASL,oBAAT,GAAgC;AAC9B,QAAIM,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV,CAD8B,CACqC;;AACnE,QAAIE,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAZ,CAF8B,CAEqC;;AACnE,QAAIG,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAX,CAH8B,CAGqC;;AAEnE,WAAO,SAASC,GAAT,GAAe,IAAf,GAAsBC,KAAtB,GAA8B,IAA9B,GAAqCC,IAArC,GAA4C,GAAnD,CAL8B,CAKqC;AACpE;;AAEG,WAASC,WAAT,GAAuB;AACnBZ,IAAAA,KAAK,CAACa,gBAAN,CAAuB,IAAvB;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEf,WAAW,CAACgB,aAA5B;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEhB,WAAW,CAACiB,cAA5B;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAEH,WAAjB;AAA8B,QAAA,SAAS,EAAEd,WAAW,CAACkB,GAArD;AAAA,kBAA2DhB,KAAK,CAACiB;AAAjE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAEnB,WAAW,CAACoB,OAA1B;AAAA,kBAAoClB,KAAK,CAACkB;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KAnCQnB,S;AAqCT,eAAeA,SAAf","sourcesContent":["import resultStyle from './ResultBar.module.css';\n\n\nfunction ResultBar(props) {\n\n    initializeGame();\n\nfunction initializeGame() {\n  color = randomColorGenerator();\n  let lotteryArray = ['btn1', 'btn2', 'btn3', 'btn4', 'btn5', 'btn6'];\n  correctBtn = lotteryArray[Math.floor(Math.random() * 7)];\n  while (typeof correctBtn == 'undefined') {\n    correctBtn = lotteryArray[Math.floor(Math.random() * 7)];\n  }\n}\n\n\n\nfunction randomColorGenerator() {\n  let red = Math.floor(Math.random() * 256);                         // Setting a random value (0-255) for the red.\n  let green = Math.floor(Math.random() * 256);                       // Setting a random value (0-255) for the green.\n  let blue = Math.floor(Math.random() * 256);                        // Setting a random value (0-255) for the blue.\n\n  return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n}\n\n    function flagHandler() {\n        props.setPlayAgainFlag(true);\n    }\n\n    return (\n        <div className={resultStyle.mainContainer}>\n            <div className={resultStyle.innerContainer}>\n                <button onClick={flagHandler} className={resultStyle.btn}>{props.buttonText}</button>\n                <p className={resultStyle.message}>{props.message}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultBar;"]},"metadata":{},"sourceType":"module"}