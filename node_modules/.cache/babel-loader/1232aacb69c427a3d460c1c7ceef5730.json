{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/components/ColorButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport buttonStyle from './ColorButton.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ColorButton(props) {\n  _s();\n\n  const [color, setColor] = useState(randomColorGenerator);\n  const [visibility, setVisibility] = useState('visible');\n  const [allButtons, setAllButtons] = useState();\n\n  function randomColorGenerator() {\n    if (props.name === props.correctBtn) {\n      return props.color;\n    }\n\n    let red = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the red.\n\n    let green = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the green.\n\n    let blue = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"; // Returning the whole new rgb(r,g,b) string.\n  }\n\n  function myHandler() {\n    if (props.color === color) {\n      console.log(props.color);\n      console.log(color);\n      props.titleColorButton(color);\n      props.messageButton(\"CORRECT!\");\n      props.playAgainButton(\"PLAY AGAIN\");\n    } else {\n      setVisibility('hidden');\n      props.messageButton(\"WRONG, TRY AGAIN!\");\n      props.playAgainButton(\"NEW COLORS\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: buttonStyle.btn,\n    onClick: myHandler,\n    style: {\n      'backgroundColor': color,\n      'visibility': visibility\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ColorButton, \"p521HO9tE5lUsPZXGnunS2IszBc=\");\n\n_c = ColorButton;\nexport default ColorButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorButton\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/components/ColorButton.js"],"names":["useState","buttonStyle","ColorButton","props","color","setColor","randomColorGenerator","visibility","setVisibility","allButtons","setAllButtons","name","correctBtn","red","Math","floor","random","green","blue","myHandler","console","log","titleColorButton","messageButton","playAgainButton","btn"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAExB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACM,oBAAD,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,SAAD,CAA5C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,EAA5C;;AAGA,WAASM,oBAAT,GAAgC;AAC5B,QAAIH,KAAK,CAACQ,IAAN,KAAeR,KAAK,CAACS,UAAzB,EAAqC;AACjC,aAAOT,KAAK,CAACC,KAAb;AACH;;AACD,QAAIS,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV,CAJ4B,CAIuC;;AACnE,QAAIC,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAZ,CAL4B,CAKuC;;AACnE,QAAIE,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAX,CAN4B,CAMuC;;AAEnE,WAAO,SAASH,GAAT,GAAe,IAAf,GAAsBI,KAAtB,GAA8B,IAA9B,GAAqCC,IAArC,GAA4C,GAAnD,CAR4B,CAQuC;AACtE;;AAED,WAASC,SAAT,GAAqB;AACjB,QAAIhB,KAAK,CAACC,KAAN,KAAgBA,KAApB,EAA2B;AACvBgB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAK,CAACC,KAAlB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACAD,MAAAA,KAAK,CAACmB,gBAAN,CAAuBlB,KAAvB;AACAD,MAAAA,KAAK,CAACoB,aAAN,CAAoB,UAApB;AACApB,MAAAA,KAAK,CAACqB,eAAN,CAAsB,YAAtB;AACH,KAND,MAMO;AACHhB,MAAAA,aAAa,CAAC,QAAD,CAAb;AACAL,MAAAA,KAAK,CAACoB,aAAN,CAAoB,mBAApB;AACApB,MAAAA,KAAK,CAACqB,eAAN,CAAsB,YAAtB;AAEH;AACJ;;AAED,sBACI;AAAQ,IAAA,SAAS,EAAEvB,WAAW,CAACwB,GAA/B;AAAoC,IAAA,OAAO,EAAEN,SAA7C;AAAwD,IAAA,KAAK,EAAE;AAAE,yBAAmBf,KAArB;AAA4B,oBAAcG;AAA1C;AAA/D;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GApCQL,W;;KAAAA,W;AAsCT,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\n\nimport buttonStyle from './ColorButton.module.css';\n\nfunction ColorButton(props) {\n\n    const [color, setColor] = useState(randomColorGenerator);\n    const [visibility, setVisibility] = useState('visible');\n    const [allButtons, setAllButtons] = useState()\n\n\n    function randomColorGenerator() {\n        if (props.name === props.correctBtn) {\n            return props.color;\n        }\n        let red = Math.floor(Math.random() * 256);                         // Setting a random value (0-255) for the red.\n        let green = Math.floor(Math.random() * 256);                       // Setting a random value (0-255) for the green.\n        let blue = Math.floor(Math.random() * 256);                        // Setting a random value (0-255) for the blue.\n\n        return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n    }\n\n    function myHandler() {\n        if (props.color === color) {\n            console.log(props.color);\n            console.log(color);\n            props.titleColorButton(color);\n            props.messageButton(\"CORRECT!\");\n            props.playAgainButton(\"PLAY AGAIN\");\n        } else {\n            setVisibility('hidden');\n            props.messageButton(\"WRONG, TRY AGAIN!\");\n            props.playAgainButton(\"NEW COLORS\");\n\n        }\n    }\n\n    return (\n        <button className={buttonStyle.btn} onClick={myHandler} style={{ 'backgroundColor': color, 'visibility': visibility }}></button>\n    );\n}\n\nexport default ColorButton;"]},"metadata":{},"sourceType":"module"}