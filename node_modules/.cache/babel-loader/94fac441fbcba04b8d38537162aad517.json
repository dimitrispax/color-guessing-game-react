{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useDebugValue, useEffect, useRef, useState } from 'react';\nimport TitleBar from \"./components/TitleBar\";\nimport ResultBar from \"./components/ResultBar\";\nimport ColorsContainer from \"./components/ColorsContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [resultBarMessage, setMessageContainerData] = useState(\"Click \");\n  const [playAgainContainerData, setplayAgainContainerData] = useState(\"\");\n  const [titleColorContainerData, setTitleColorContainerData] = useState(\"\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState(false);\n  const [color, setColor] = useState(randomColorGenerator());\n  const [correctBtn, setCorrectBtn] = useState(0);\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  useEffect(() => {\n    if (playAgainFlagData) {\n      initializeGame();\n      setplayAgainFlagData(false);\n    }\n  }, [playAgainFlagData]);\n  useEffect(() => {\n    console.log(\"correctBtn: \" + correctBtn);\n  }, [correctBtn]);\n\n  function initializeGame() {\n    setColor(randomColorGenerator());\n    setCorrectBtn(Math.floor(Math.random() * 7)); // while (typeof correctBtn === 'undefined') {\n    //   setCorrectBtn(Math.floor(Math.random() * 7));\n    // }\n  }\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the red.\n\n    let green = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the green.\n\n    let blue = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"; // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      color: color,\n      titleColor: titleColorApp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultBar, {\n      message: message,\n      buttonText: buttonText,\n      playAgain: setplayAgainFlagData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorsContainer, {\n      messageContainer: setMessageContainerData,\n      playAgainContainer: setplayAgainContainerData,\n      titleColorContainer: setTitleColorContainerData,\n      color: color,\n      correctBtn: correctBtn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bsk5UJfeR3v65EvBD9JFUzhOSIs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/App.js"],"names":["useDebugValue","useEffect","useRef","useState","TitleBar","ResultBar","ColorsContainer","App","props","resultBarMessage","setMessageContainerData","playAgainContainerData","setplayAgainContainerData","titleColorContainerData","setTitleColorContainerData","playAgainFlagData","setplayAgainFlagData","color","setColor","randomColorGenerator","correctBtn","setCorrectBtn","initializeGame","console","log","Math","floor","random","red","green","blue","titleColorApp","message","buttonText"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,QAA3C,QAA2D,OAA3D;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAElB,QAAM,CAACC,gBAAD,EAAmBC,uBAAnB,IAA8CP,QAAQ,CAAC,QAAD,CAA5D;AACA,QAAM,CAACQ,sBAAD,EAAyBC,yBAAzB,IAAsDT,QAAQ,CAAC,EAAD,CAApE;AACA,QAAM,CAACU,uBAAD,EAA0BC,0BAA1B,IAAwDX,QAAQ,CAAC,EAAD,CAAtE;AACA,QAAM,CAACY,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACgB,oBAAoB,EAArB,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,CAAD,CAA5C;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,iBAAJ,EAAuB;AACrBO,MAAAA,cAAc;AACdN,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;AACF,GALQ,EAKN,CAACD,iBAAD,CALM,CAAT;AAOAd,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBJ,UAA7B;AACD,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;;AAKA,WAASE,cAAT,GAA0B;AACxBJ,IAAAA,QAAQ,CAACC,oBAAoB,EAArB,CAAR;AACAE,IAAAA,aAAa,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAb,CAFwB,CAGxB;AACA;AACA;AACD;;AAED,WAASR,oBAAT,GAAgC;AAC9B,QAAIS,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV,CAD8B,CACqC;;AACnE,QAAIE,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAZ,CAF8B,CAEqC;;AACnE,QAAIG,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAX,CAH8B,CAGqC;;AAEnE,WAAO,SAASC,GAAT,GAAe,IAAf,GAAsBC,KAAtB,GAA8B,IAA9B,GAAqCC,IAArC,GAA4C,GAAnD,CAL8B,CAKqC;AACpE;;AAED,sBACE;AAAA,4BACE,QAAC,QAAD;AACE,MAAA,KAAK,EAAEb,KADT;AAEE,MAAA,UAAU,EAAEc;AAFd;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,SAAD;AACE,MAAA,OAAO,EAAEC,OADX;AAEE,MAAA,UAAU,EAAEC,UAFd;AAGE,MAAA,SAAS,EAAEjB;AAHb;AAAA;AAAA;AAAA;AAAA,YALF,eAUE,QAAC,eAAD;AACC,MAAA,gBAAgB,EAAEN,uBADnB;AAEC,MAAA,kBAAkB,EAAEE,yBAFrB;AAGC,MAAA,mBAAmB,EAAEE,0BAHtB;AAIC,MAAA,KAAK,EAAEG,KAJR;AAKC,MAAA,UAAU,EAAEG;AALb;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA9DQb,G;;KAAAA,G;AAgET,eAAeA,GAAf","sourcesContent":["import { useDebugValue, useEffect, useRef, useState } from 'react';\n\nimport TitleBar from \"./components/TitleBar\";\nimport ResultBar from \"./components/ResultBar\";\nimport ColorsContainer from \"./components/ColorsContainer\";\n\n\nfunction App(props) {\n\n  const [resultBarMessage, setMessageContainerData] = useState(\"Click \");\n  const [playAgainContainerData, setplayAgainContainerData] = useState(\"\");\n  const [titleColorContainerData, setTitleColorContainerData] = useState(\"\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState(false);\n  const [color, setColor] = useState(randomColorGenerator());\n  const [correctBtn, setCorrectBtn] = useState(0);\n\n\n\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  useEffect(() => {\n    if (playAgainFlagData) {\n      initializeGame();\n      setplayAgainFlagData(false);\n    }\n  }, [playAgainFlagData]);\n\n  useEffect(() => {\n    console.log(\"correctBtn: \" + correctBtn);\n  }, [correctBtn]);\n\n\n  function initializeGame() {\n    setColor(randomColorGenerator());\n    setCorrectBtn(Math.floor(Math.random() * 7));\n    // while (typeof correctBtn === 'undefined') {\n    //   setCorrectBtn(Math.floor(Math.random() * 7));\n    // }\n  }\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256);                         // Setting a random value (0-255) for the red.\n    let green = Math.floor(Math.random() * 256);                       // Setting a random value (0-255) for the green.\n    let blue = Math.floor(Math.random() * 256);                        // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return (\n    <div>\n      <TitleBar\n        color={color}\n        titleColor={titleColorApp}\n      />\n      <ResultBar\n        message={message}\n        buttonText={buttonText}\n        playAgain={setplayAgainFlagData}\n      />\n      <ColorsContainer\n       messageContainer={setMessageContainerData} \n       playAgainContainer={setplayAgainContainerData} \n       titleColorContainer={setTitleColorContainerData} \n       color={color} \n       correctBtn={correctBtn} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}