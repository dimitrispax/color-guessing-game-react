{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useDebugValue, useEffect, useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport TitleBar from \"./components/TitleBar\"; // import ResultBar from \"./components/ResultBar\";\n// import ColorsContainer from \"./components/ColorsContainer\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [resultBarMessage, setResultBarMessage] = useState(\"Select the correct color.\");\n  const [resultBarButtonText, setResultBarButtonText] = useState(\"NEW COLORS\");\n  const [playAgainContainerData, setplayAgainContainerData] = useState(\"\");\n  const [titleBarColor, setTitleBarColor] = useState(\"\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState(false);\n  const [rgbColorName, setRgbColorName] = useState(\"\");\n  const [correctBtn, setCorrectBtn] = useState(0);\n  const [colorsArray, setColorsArray] = useState([]);\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  useEffect(() => {\n    if (playAgainFlagData) {\n      initializeGame();\n      setplayAgainFlagData(false);\n    }\n  }, [playAgainFlagData]);\n  useEffect(() => {\n    console.log(\"correctBtn: \" + correctBtn);\n  }, [correctBtn]);\n\n  function initializeGame() {\n    let colorsArray = [];\n\n    for (let i = 0; i < 6; i++) {\n      colorsArray.push(randomColorGenerator());\n    }\n\n    setColorsArray(colorsArray);\n    setCorrectBtn(colorsArray[Math.floor(Math.random() * colorsArray.length + 1)]); // random correct number\n  }\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the red.\n\n    let green = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the green.\n\n    let blue = Math.floor(Math.random() * 256); // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"; // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      rgbColorName: rgbColorName,\n      titleBarColor: titleBarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultBar, {\n      resultBarMessage: resultBarMessage,\n      resultBarButtonText: resultBarButtonText,\n      playAgain: () => {\n        initializeGame();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorsContainer, {\n      rgbColorName: rgbColorName,\n      correctBtn: correctBtn,\n      messageContainer: setMessageContainerData,\n      playAgainContainer: setplayAgainContainerData,\n      titleColorContainer: setTitleColorContainerData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ywJW5OWnWgfPUajZLxaT2/uKDgs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/App.js"],"names":["useDebugValue","useEffect","useRef","useState","flushSync","TitleBar","App","props","resultBarMessage","setResultBarMessage","resultBarButtonText","setResultBarButtonText","playAgainContainerData","setplayAgainContainerData","titleBarColor","setTitleBarColor","playAgainFlagData","setplayAgainFlagData","rgbColorName","setRgbColorName","correctBtn","setCorrectBtn","colorsArray","setColorsArray","initializeGame","console","log","i","push","randomColorGenerator","Math","floor","random","length","red","green","blue","setMessageContainerData","setTitleColorContainerData"],"mappings":"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","sourcesContent":["import { useDebugValue, useEffect, useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport TitleBar from \"./components/TitleBar\";\n// import ResultBar from \"./components/ResultBar\";\n// import ColorsContainer from \"./components/ColorsContainer\";\n\n\nfunction App(props) {\n\n  const [resultBarMessage, setResultBarMessage] = useState(\"Select the correct color.\");\n  const [resultBarButtonText, setResultBarButtonText] = useState(\"NEW COLORS\");\n\n  const [playAgainContainerData, setplayAgainContainerData] = useState(\"\");\n  const [titleBarColor, setTitleBarColor] = useState(\"\");\n  const [playAgainFlagData, setplayAgainFlagData] = useState(false);\n  const [rgbColorName, setRgbColorName] = useState(\"\");\n  const [correctBtn, setCorrectBtn] = useState(0);\n\n  const [colorsArray, setColorsArray] = useState([]);\n\n\n\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  useEffect(() => {\n    if (playAgainFlagData) {\n      initializeGame();\n      setplayAgainFlagData(false);\n    }\n  }, [playAgainFlagData]);\n\n  useEffect(() => {\n    console.log(\"correctBtn: \" + correctBtn);\n  }, [correctBtn]);\n\n\n\n\n  function initializeGame() {\n    let colorsArray = [];\n    for (let i = 0; i < 6; i++) {\n      colorsArray.push(randomColorGenerator());\n    }\n    setColorsArray(colorsArray);\n    setCorrectBtn(colorsArray[Math.floor(Math.random() * colorsArray.length + 1)]); // random correct number\n\n  }\n\n\n\n\n  function randomColorGenerator() {\n    let red = Math.floor(Math.random() * 256);                         // Setting a random value (0-255) for the red.\n    let green = Math.floor(Math.random() * 256);                       // Setting a random value (0-255) for the green.\n    let blue = Math.floor(Math.random() * 256);                        // Setting a random value (0-255) for the blue.\n\n    return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";            // Returning the whole new rgb(r,g,b) string.\n  }\n\n  return (\n    <div>\n      <TitleBar\n        rgbColorName={rgbColorName}\n        titleBarColor={titleBarColor}\n      />\n      <ResultBar\n        resultBarMessage={resultBarMessage}\n        resultBarButtonText={resultBarButtonText}\n        playAgain={() => { initializeGame() }}\n      />\n      <ColorsContainer\n        rgbColorName={rgbColorName}\n        correctBtn={correctBtn}\n        messageContainer={setMessageContainerData}\n        playAgainContainer={setplayAgainContainerData}\n        titleColorContainer={setTitleColorContainerData}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}