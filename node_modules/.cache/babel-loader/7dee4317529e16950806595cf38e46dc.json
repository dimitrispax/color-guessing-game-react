{"ast":null,"code":"var _jsxFileName = \"/home/nile/Desktop/color-guessing-game-react/src/components/ColorsContainer/ColorsContainer.js\";\nimport containerStyle from './ColorsContainer.module.css';\nimport containerStyleMedium from './C';\nimport ColorSquare from '../ColorSquare/ColorSquare';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ColorsContainer = _ref => {\n  let {\n    colorsArray,\n    correctColor,\n    setColorsArray,\n    setTitleBarColor,\n    setResultBarButtonText,\n    setResultBarMessage\n  } = _ref;\n\n  const clickHandler = (color, id) => {\n    // if the color of the clicked button is equal\n    if (color === correctColor) {\n      // with the correctColor, then: \n      changeColor();\n      setTitleBarColor(correctColor);\n      setResultBarButtonText(\"PLAY AGAIN\");\n      setResultBarMessage(\"CORRECT!\");\n    } else {\n      changeVisibility(id);\n      setResultBarMessage(\"WRONG, TRY AGAIN!\");\n    }\n  };\n\n  const changeColor = () => {\n    const tempColorsArray = [...colorsArray];\n    tempColorsArray.map(object => {\n      if (object.visibility === 'visible') object.color = correctColor;\n    });\n    setColorsArray(tempColorsArray);\n  };\n\n  const changeVisibility = id => {\n    const tempColorsArray = [...colorsArray];\n    tempColorsArray[id].visibility = 'hidden';\n    setColorsArray(tempColorsArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: containerStyle.mainContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: containerStyle.innerContainer,\n      children: Object.keys(colorsArray).map(key => {\n        return /*#__PURE__*/_jsxDEV(ColorSquare, {\n          correctColor: correctColor,\n          onClick: () => clickHandler(colorsArray[key].color, colorsArray[key].id),\n          backgroundColor: colorsArray[key].color,\n          visibility: colorsArray[key].visibility\n        }, colorsArray[key].id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ColorsContainer;\nexport default ColorsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsContainer\");","map":{"version":3,"sources":["/home/nile/Desktop/color-guessing-game-react/src/components/ColorsContainer/ColorsContainer.js"],"names":["containerStyle","containerStyleMedium","ColorSquare","ColorsContainer","colorsArray","correctColor","setColorsArray","setTitleBarColor","setResultBarButtonText","setResultBarMessage","clickHandler","color","id","changeColor","changeVisibility","tempColorsArray","map","object","visibility","mainContainer","innerContainer","Object","keys","key"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AACA,OAAOC,oBAAP,MAAiC,KAAjC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAEA,MAAMC,eAAe,GAAG,QAAkH;AAAA,MAAjH;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA,cAA7B;AAA6CC,IAAAA,gBAA7C;AAA+DC,IAAAA,sBAA/D;AAAuFC,IAAAA;AAAvF,GAAiH;;AAEtI,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAe;AAAU;AAC1C,QAAID,KAAK,KAAKN,YAAd,EAA4B;AAAc;AACtCQ,MAAAA,WAAW;AACXN,MAAAA,gBAAgB,CAACF,YAAD,CAAhB;AACAG,MAAAA,sBAAsB,CAAC,YAAD,CAAtB;AACAC,MAAAA,mBAAmB,CAAC,UAAD,CAAnB;AACH,KALD,MAKO;AACHK,MAAAA,gBAAgB,CAACF,EAAD,CAAhB;AACAH,MAAAA,mBAAmB,CAAC,mBAAD,CAAnB;AACH;AACJ,GAVD;;AAYA,QAAMI,WAAW,GAAG,MAAM;AACtB,UAAME,eAAe,GAAG,CAAC,GAAGX,WAAJ,CAAxB;AACAW,IAAAA,eAAe,CAACC,GAAhB,CAAoBC,MAAM,IAAI;AAC1B,UAAIA,MAAM,CAACC,UAAP,KAAsB,SAA1B,EACID,MAAM,CAACN,KAAP,GAAeN,YAAf;AACP,KAHD;AAIAC,IAAAA,cAAc,CAACS,eAAD,CAAd;AACH,GAPD;;AASA,QAAMD,gBAAgB,GAAIF,EAAD,IAAQ;AAC7B,UAAMG,eAAe,GAAG,CAAC,GAAGX,WAAJ,CAAxB;AACAW,IAAAA,eAAe,CAACH,EAAD,CAAf,CAAoBM,UAApB,GAAiC,QAAjC;AACAZ,IAAAA,cAAc,CAACS,eAAD,CAAd;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAEf,cAAc,CAACmB,aAA/B;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEnB,cAAc,CAACoB,cAA/B;AAAA,gBACKC,MAAM,CAACC,IAAP,CAAYlB,WAAZ,EAAyBY,GAAzB,CAA8BO,GAAD,IAAS;AACnC,4BACI,QAAC,WAAD;AACI,UAAA,YAAY,EAAElB,YADlB;AAEI,UAAA,OAAO,EAAE,MAAMK,YAAY,CAACN,WAAW,CAACmB,GAAD,CAAX,CAAiBZ,KAAlB,EAAyBP,WAAW,CAACmB,GAAD,CAAX,CAAiBX,EAA1C,CAF/B;AAGI,UAAA,eAAe,EAAER,WAAW,CAACmB,GAAD,CAAX,CAAiBZ,KAHtC;AAII,UAAA,UAAU,EAAEP,WAAW,CAACmB,GAAD,CAAX,CAAiBL;AAJjC,WAAkBd,WAAW,CAACmB,GAAD,CAAX,CAAiBX,EAAnC;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH,OATA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA9CD;;KAAMT,e;AAgDN,eAAeA,eAAf","sourcesContent":["import containerStyle from './ColorsContainer.module.css';\nimport containerStyleMedium from './C'\nimport ColorSquare from '../ColorSquare/ColorSquare';\n\nconst ColorsContainer = ({ colorsArray, correctColor, setColorsArray, setTitleBarColor, setResultBarButtonText, setResultBarMessage }) => {\n\n    const clickHandler = (color, id) => {         // if the color of the clicked button is equal\n        if (color === correctColor) {             // with the correctColor, then: \n            changeColor()\n            setTitleBarColor(correctColor)\n            setResultBarButtonText(\"PLAY AGAIN\")\n            setResultBarMessage(\"CORRECT!\")\n        } else {\n            changeVisibility(id)\n            setResultBarMessage(\"WRONG, TRY AGAIN!\")\n        }\n    }\n\n    const changeColor = () => {\n        const tempColorsArray = [...colorsArray]\n        tempColorsArray.map(object => {\n            if (object.visibility === 'visible')\n                object.color = correctColor\n        })\n        setColorsArray(tempColorsArray)\n    }\n\n    const changeVisibility = (id) => {\n        const tempColorsArray = [...colorsArray]\n        tempColorsArray[id].visibility = 'hidden';\n        setColorsArray(tempColorsArray)\n    }\n\n    return (\n        <div className={containerStyle.mainContainer}>\n            <div className={containerStyle.innerContainer}>\n                {Object.keys(colorsArray).map((key) => {\n                    return (\n                        <ColorSquare key={colorsArray[key].id}\n                            correctColor={correctColor}\n                            onClick={() => clickHandler(colorsArray[key].color, colorsArray[key].id)}\n                            backgroundColor={colorsArray[key].color}\n                            visibility={colorsArray[key].visibility}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    )\n\n}\n\nexport default ColorsContainer;"]},"metadata":{},"sourceType":"module"}